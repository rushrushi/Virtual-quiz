1. Pygame Mixer Initialization for Sound

pygame.mixer.init()
sound_correct = pygame.mixer.Sound("correct.mp3")
sound_wrong = pygame.mixer.Sound("wrong.mp3")
pygame.mixer.init(): Ye line Pygame ke audio system ko initialize karti hai taaki hum sound effects ko play kar sakein.

pygame.mixer.Sound(): Isse hum ek sound file ko load karte hain. Yahan par "correct.mp3" aur "wrong.mp3" sound files ko load kiya gaya hai jo correct aur incorrect answers par play honge.

2. Background Music

pygame.mixer.music.load("background_music.mp3")
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play(-1, 0.0)
pygame.mixer.music.load(): Isse background music ko load kiya jaata hai. Aap apni file ka path de sakte hain.

pygame.mixer.music.set_volume(): Yahan volume ko adjust kiya gaya hai. 0.3 ka matlab hai ki volume thoda low hai.

pygame.mixer.music.play(): Ye music ko loop mein play karta hai. -1 ka matlab hai infinite loop mein chalega.

3. MediaPipe for Hand Tracking

mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7)
mp_draw = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands: Ye MediaPipe ke hand tracking module ko import karta hai.

hands = mp_hands.Hands(): Ye object hand detection ko enable karta hai. Humne ismein max_num_hands=1 diya hai, iska matlab hai ki ek time par sirf ek haath ko track kiya jaayega. min_detection_confidence=0.7 ka matlab hai ki agar confidence 70% se kam hai, toh hand ko detect nahi kiya jayega.

mp_draw = mp.solutions.drawing_utils: Ye line MediaPipe ke drawing utilities ko use karne ke liye hai, jo hand landmarks ko image par draw karte hain.

4. Webcam Initialization

cap = cv2.VideoCapture(0)
cv2.namedWindow("Gesture Quiz Game", cv2.WND_PROP_FULLSCREEN)
cv2.setWindowProperty("Gesture Quiz Game", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
cap = cv2.VideoCapture(0): Ye line webcam ko initialize karti hai, jahan 0 default camera ko specify karta hai.

cv2.namedWindow() aur cv2.setWindowProperty(): Ye lines window ko full screen mode mein set karti hain. Jab game chal raha ho toh fullscreen mode mein aapko zyada space milta hai.

5. Questions and Options

questions = [
    {"question": "What is the capital of France?", "options": ["Paris", "London", "Rome", "Berlin"], "answer": "Paris"},
    {"question": "Which planet is known as the Red Planet?", "options": ["Earth", "Venus", "Mars", "Jupiter"], "answer": "Mars"},
    ...
]
Yahan par hum apni questions ki list define karte hain. Har question ke saath uske options aur correct answer diya gaya hai. Ye list har round mein ek question display karne ke liye use hoti hai.

6. Drawing Text with Stroke

def draw_text_with_stroke(img, text, position, font, scale, color, stroke_color, thickness):
    x, y = position
    cv2.putText(img, text, (x, y), font, scale, stroke_color, thickness + 3, cv2.LINE_AA)
    cv2.putText(img, text, (x, y), font, scale, color, thickness, cv2.LINE_AA)
cv2.putText(): Ye function image par text ko draw karta hai. Hum text ke upar ek stroke (outline) bhi draw karte hain, taaki text clearly visible ho, chahe background dark ho ya light ho.

stroke_color aur thickness: Ye outline ka color aur thickness set karte hain.

7. Draw Question and Options

def draw_question(img, q_data):
    ...
    for i, opt in enumerate(q_data['options']):
        x1, y1 = 100, 100 + i * 80
        x2, y2 = 500, y1 + 60
        ...
        cv2.rectangle(img, (x1, y1), (x2, y2), color, -1)
        cv2.putText(img, opt, (x1 + 20, y1 + 40), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 0), 2)
cv2.rectangle(): Ye option boxes draw karta hai. Har option ka box ek rectangle hota hai jo x1, y1, x2, y2 ke coordinates se define hota hai.

cv2.putText(): Ye har option ke liye text ko uske box ke andar draw karta hai, jaise A) Paris, B) London, etc.

8. Timer and Feedback

def draw_timer(img):
    ...
    remaining = max(0, QUESTION_TIME_LIMIT - int(time.time() - question_start_time))
    ...
time.time(): Ye current time ko seconds mein return karta hai. Hum isse time calculate karte hain ki kitna time remaining hai.

draw_timer(): Is function se hum timer ko display karte hain. Jab time kam hota hai, text ka color red ho jaata hai.

9. Game Logic for Answer Checking

if index_finger_tip:
    for i, (x1, y1, x2, y2) in enumerate(option_boxes):
        inside = x1 <= index_finger_tip[0] <= x2 and y1 <= index_finger_tip[1] <= y2
        if inside and not was_inside_box[i]:
            ...
            show_feedback = True
            feedback_time = time.time()
Hand Detection: Jab user ka index finger box ke andar hota hai, hum check karte hain ki user ne kaunsa option select kiya hai.

Feedback Display: Agar option sahi hai, toh "Correct!" feedback dikhaya jaata hai, aur agar galat hai, toh "Try Again!" dikhaya jaata hai.

10. Game Reset and Score Display

def reset_game():
    global current_q, score, question_start_time
    current_q = 0
    score = 0
    question_start_time = time.time()

def show_final_score(img):
    ...
    cv2.putText(img, "Retry", (retry_btn[0]+50, retry_btn[1]+45), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
reset_game(): Ye function game ko reset karta hai, taaki jab user "Retry" kare, game fresh start ho.

show_final_score(): Game ke end mein score dikhane ke liye aur "Retry" aur "Exit" buttons display karne ke liye use hota hai.

11. Smoothing and Sharpening Image

blurred = cv2.GaussianBlur(img, (5, 5), 0)
kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
img = cv2.filter2D(blurred, -1, kernel)
cv2.GaussianBlur(): Ye function image ko blur karta hai taaki noise reduce ho sake.

cv2.filter2D(): Ye function sharpening filter apply karta hai taaki image zyada sharp aur clear ho.


Summary
Pygame mixer for handling sounds (correct/wrong answers).

MediaPipe Hands for hand tracking to detect finger positions.

OpenCV for webcam feed, drawing questions, options, timer, and feedback.

Image manipulation (blurring, sharpening) for better visual quality.

Timers and feedback to make the quiz interactive and engaging.

Game reset and score display at the end, with options for retrying or exiting.